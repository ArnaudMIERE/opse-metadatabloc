{"remainingRequest":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/src/lib/modules/opse-datasetname-block/opse-datasetname-block.vue?vue&type=style&index=0&id=9460ff98&scoped=true&lang=css&","dependencies":[{"path":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/src/lib/modules/opse-datasetname-block/opse-datasetname-block.vue","mtime":1644331050199},{"path":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/openopse/Documents/GitHub/Catalogue Sedoo/projets/opse-metadatabloc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRoZW1lLS1saWdodC52LWJ0bi52LWJ0bi0taWNvbnsKICBjb2xvcjogcmdiYSgwLDAsMCwuNTQpOwp9Ci50aGVtZS0tbGlnaHQudi1pY29uIHsKICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5Q29sb3IpOwp9CnRoZW1lLS1saWdodC52LWJ0biB7CiAgY29sb3I6IHZhcigtLXByaW1hcnlDb2xvcik7Cn0KCg=="},{"version":3,"sources":["opse-datasetname-block.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"opse-datasetname-block.vue","sourceRoot":"src/lib/modules/opse-datasetname-block","sourcesContent":["<i18n  >\n{\n  \"en\": {\n    \"opseDatasetName\": \"Dataset name\",\n    \"en\": \"English\",\n    \"fr\": \"French\"\n    \n  },\n  \"fr\": {\n    \"opseDatasetName\": \"Nom du jeu de données\",\n    \"en\": \"Anglais\",\n    \"fr\": \"Français\"\n    \n  }\n}\n</i18n>\n<template>\n  <aeris-metadata-layout\n    v-if=\"isVisible\"\n    :title=\"$t('opseDatasetName')\"\n    :theme=\"theme\"\n    :canDisplayEditIcon=\"canShowEditIcon\"\n    :displayInFlat=\"true\"\n    icon=\"mdi-file\"\n    @edit=\"displayEditionForm()\"\n  >\n  <div v-if=\"metadata.resourceDatasetName\" v-html=\"getResourceDatasetName\"></div>\n  <aeris-metadata-dialog-layout\n    v-if=\"canDisplayEditionForm\"\n    max-width=\"800px\"\n    :is-displaying-dialog=\"isDisplayingDialogEditionForm\"\n    :disable-save-button=\"!isFormValid\"\n    :title=\"$t('opseDatasetName')\"\n    @cancel=\"hideForm()\"\n    @save-modifications=\"saveModifications()\"\n  >\n  <template v-slot:dialog-contents>\n        <v-form ref=\"form\" v-model=\"isFormValid\">\n          <v-tabs>\n            <v-tab\n              v-for=\"(language, index) in Object.keys(metadata.resourceDatasetName)\"\n              :key=\"index\"\n            >{{ $t(language) }}</v-tab>\n            <v-tab-item\n              v-for=\"(language, index) in Object.keys(metadata.resourceDatasetName)\"\n              :key=\"index\"\n            >\n              <v-textarea\n              class=\"pt-2\"\n                v-model=\"editedDescriptions[language]\"\n                outlined\n                hide-details=\"auto\"\n                height=\"650px\"\n                :required=\"language === 'en'\"\n                :rules=\"language === 'en' ? textAreaRules : []\"\n                :label=\"language === 'en' ? 'mandatory' : 'optional'\"\n              ></v-textarea>\n            </v-tab-item>\n          </v-tabs>\n        </v-form>\n      </template>\n  </aeris-metadata-dialog-layout>\n\n  </aeris-metadata-layout>\n</template>\n\n<script>\nimport AerisMetadataLayout from \"../aeris-metadata-ui/aeris-metadata-layout/aeris-metadata-layout.vue\"\nimport AerisMetadataDialogLayout from \"../aeris-metadata-ui/aeris-metadata-layout/aeris-metadata-dialog-layout.vue\";\nimport { applyPrimaryAndSecondaryColors, formatEditedData, badPatchToRemoveParagraphTag } from \"../../utils\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport marked from \"marked\"\nexport default {\n  name: 'opse-datasetname-block',\n\n  components: {\n    AerisMetadataLayout,\n    AerisMetadataDialogLayout\n  },\n\n  data() {\n    return {\n      isDisplayingDialogEditionForm: false,\n      editedDescriptions:null,\n      isFormValid: true,\n      dialog:false,\n      textAreaRules: [v => !!v || \"Content is required\"],\n\n    }\n  },\n\n  props: {\n    language: {\n      type: String,\n      default: \"en\"\n    },\n    theme: {\n      type: Object,\n      default: () => {\n        return {        \n        primaryColor: \"#F39C12\",\n        secondaryColor: \"#AAA\"};\n      }\n    },\n    service: null,\n    downloadUrl: null,\n    metadata: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n\n    markdown:{\n      type: Boolean,\n      default: true\n    },\n\n    isEditionAllowed:{\n      type: Boolean,\n      default: false\n    }\n    \n  },\n\n  computed: {\n    applyTheme() {\n      return applyPrimaryAndSecondaryColors(this.theme);\n    },\n\n    isVisible() {\n      const isVisible = this.isEditionAllowed || !!this.getResourceDatasetNames;\n      this.$emit(\"getVisibility\", {\n        name: this.$options.name,\n        programmaticScrollingTitle: this.$t(\"opseDatasetName\"),\n        isVisible\n      });\n      return isVisible;\n    },\n\n   \n    canShowEditIcon() {\n      return this.isEditionAllowed && !this.isDisplayingDialogEditionForm;\n    },\n    canDisplayEditionForm() {\n      return this.isEditionAllowed && this.isDisplayingDialogEditionForm;\n    },\n\n    metadataLanguage(){\n      if (this.metadata){\n        if (this.metadata.language){\n          return this.metadata.language\n        }\n      }\n      return this.language\n    },\n\n   \n    getResourceDatasetName(){\n      let aux = this.getResourceDatasetNames;\n      let result = aux[this.language];\n      if ((!result) || (result.trim().length ==0)){\n        return aux[this.metadataLanguage]\n      }\n      return result;\n    },\n    \n    getResourceDatasetNames() {\n      const resourceDatasetName = cloneDeep(this.metadata.resourceDatasetName);\n      if (resourceDatasetName) {\n        if (this.markdown) {\n          for (let item in resourceDatasetName) {\n            if (resourceDatasetName.hasOwnProperty(item)) {\n              resourceDatasetName[item] = marked(\n                this.addSpaces(resourceDatasetName[item])\n              );\n            }\n          }\n        }\n      }\n      return resourceDatasetName;\n    }\n  },\n\n  watch: {\n    language(value) {\n      this.$i18n.locale = value;\n    }\n  },\n\n  created() {\n   this.$i18n.locale = this.language;\n  },\n\n  \n\n  methods: {\n    \n    addSpaces(value) {\n      let aux = value.replace(/#/g, \"# \");\n      aux = aux.replace(/# #/g, \"##\");\n      aux = aux.replace(/# #/g, \"##\");\n      return aux;\n    },\n  \n\n  displayEditionForm() {\n      if (!this.metadata.resourceDatasetName) {\n        this.$set(this.metadata, \"resourceDatasetName\", {en: \"\", fr: \"\"})\n      }\n      this.editedDescriptions = cloneDeep(this.metadata.resourceDatasetName);\n      badPatchToRemoveParagraphTag(this.editedDescriptions);\n      this.isDisplayingDialogEditionForm = true;\n    },\n\n  saveModifications() {\n      if (this.$refs.form.validate()) {\n        Object.keys(this.editedDescriptions).forEach(key => {\n          this.metadata.resourceDatasetName[key] = this.editedDescriptions[key];\n        });\n        const formatedEditedData = formatEditedData(\n          \"resourceDatasetName\",\n          this.metadata.resourceDatasetName\n        );\n        this.$emit(\"sendEditedData\", formatedEditedData);\n        this.hideForm();\n      }\n    },\n\n    hideForm() {\n      this.editedDescriptions = null;\n      this.isDisplayingDialogEditionForm = false;\n    }\n  \n},\n  \n}\n</script>\n\n<style scoped>\n.theme--light.v-btn.v-btn--icon{\n  color: rgba(0,0,0,.54);\n}\n.theme--light.v-icon {\n    color: var(--primaryColor);\n}\ntheme--light.v-btn {\n  color: var(--primaryColor);\n}\n\n</style>\n"]}]}